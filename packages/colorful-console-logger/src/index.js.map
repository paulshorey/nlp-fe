{"mappings":"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","sources":["./src/function/destroyCircular.js","./src/function/serializeError.js","./src/function/CConsoleLog.js","./src/index.js"],"sourcesContent":["const destroyCircular = (from, seen) => {\n  // null seen as object\n  if (from === null || from === undefined) {\n    return from\n  }\n  // setup output variable\n  const to = Array.isArray(from) ? [] : {}\n  // reading\n  seen.push(from)\n  // iterate input\n  for (const [key, value] of Object.entries(from)) {\n    if (typeof value === 'function') {\n      continue\n    }\n    if (!value || typeof value !== 'object') {\n      to[key] = value\n      continue\n    }\n    if (!seen.includes(from[key])) {\n      to[key] = destroyCircular(from[key], seen.slice())\n      continue\n    }\n    to[key] = '[Circular]'\n  }\n  const commonProperties = [\n    'name',\n    'message',\n    'stack',\n    'code'\n  ]\n  for (const property of commonProperties) {\n    if (typeof from[property] === 'string') {\n      to[property] = from[property]\n    }\n  }\n  return to\n}\nexport default destroyCircular","import destroyCircular from './destroyCircular'\n\nexport default (value) => {\n  if (typeof value === 'object') {\n    return destroyCircular(value, [])\n  }\n  // People sometimes throw things besides Error objectsâ€¦\n  if (typeof value === 'function') {\n    // `JSON.stringify()` discards functions. We do too, unless a function is thrown directly.\n    return `[Function: ${(value.name || 'anonymous')}]`\n  }\n  return value\n}","import destroyCircular from \"./destroyCircular\"\nimport serializeError from \"./serializeError\"\n\n// use \"browser\" colors if in browser\nlet NODEJSCOLORS = typeof window !== \"object\"\n// also use \"browser\" colors if in NodeJS with \"--inspect\" or \"--inspect-brk\" flag\nif (NODEJSCOLORS && process.execArgv.join().includes(\"--inspect\")) {\n  NODEJSCOLORS = false\n}\n\n/*\n * Log to console\n */\nexport default function () {\n  let args = [...arguments]\n\n  /*\n   * optional:\n   * trace file:line, where log originated\n   */\n  let trace = \"\"\n  if (this.useTrace) {\n    let stack = []\n    let err = new Error()\n    if (err.stack) {\n      stack = err.stack.split(\"\\n\")\n      if (stack[2]) {\n        // determine file:line which called this console log\n        let str = stack[2]\n        let i_end = str.lastIndexOf(\":\")\n        let i_start_before = str.lastIndexOf(\"/\", i_end - 20) + 1\n        trace = `(${str.substring(i_start_before, i_end)})`\n      }\n    }\n  }\n\n  /*\n   * optimize message view\n   */\n  let hasError = false\n  let a = 0\n  let a_is_string = []\n  while (a < args.length) {\n    // if first argument is string, give it a colon \": \"\n    if (a === 0 && typeof args[a] === \"string\") {\n      if (args.length > a + 1) {\n        args[a] += \": \"\n      } else {\n        args[a] += \" \"\n      }\n    }\n\n    // fix object from being printed as \"[object Object]\"\n    if (typeof args[a] === \"object\") {\n      if (args[a] instanceof Error) {\n        // error object\n        hasError = true\n        try {\n          // going to assume this is an Error\n          args[a] = serializeError(args[a])\n          if (typeof args[a] === \"object\") {\n            args[a] = serializeError(args[a].stack)\n          }\n        } catch (e) {}\n      } else {\n        // regular object\n        // serialize so it does not display changes made after log has printed\n        args[a] = JSON.parse(JSON.stringify(destroyCircular(args[a], [])))\n      }\n    }\n\n    // consolidate simple types into one, if color1ed,\n    // so all messages will be displayed in color1\n    // else if (\n    //   color1 &&\n    //   (typeof args[a] === \"string\" ||\n    //     typeof args[a] === \"number\" ||\n    //     typeof args[a] === \"boolean\" ||\n    //     typeof args[a] === \"undefined\")\n    // ) {\n    //   // remember this if check for next time\n    //   a_is_string[a] = true\n    //   // check previous, if same type\n    //   if (a_is_string[a - 1]) {\n    //     // consolidate current into previous value\n    //     args[a - 1] += \", \" + args[a]\n    //     // delete current\n    //     args.splice(a, 1)\n    //     a--\n    //   }\n    // }\n    // next\n    a++\n  }\n\n  /*\n   * error - prepare message for output as string\n   */\n  let error_message = ''\n  if (this.action==='error_message') {\n    args[0] = error_message = (args[0] && typeof args[0] === 'string') ? args[0].split('\\n').slice(0,2).map(str=>str.replace(/\\/.+\\//g,'')).toString() : 'error'\n    this.action = 'error'\n  }\n\n  /*\n   * color1 messages\n   *\n   * on NODE JS\n   * https://en.wikipedia.org/wiki/ANSI_escape_code#Colors <- use \"FG Code\" for text, \"BG Code\" for background\n   *\n   * \\x1b[41m     \\x1b[33m       %s        \\x1b[0m\n   * red bg       yellow text    string    escape for next line\n   *\n   * \\x1b[47m           \\x1b[30m       %s        \\x1b[0m\n   * light grey bg      black text     string    escape for next line\n   */\n  let action = this.action\n  let color1 = \"\"\n  let color2 = \"\"\n  if (this.useColor && typeof args[0] === \"string\") {\n    /*\n     * color for CLI / Terminal\n     */\n    if (NODEJSCOLORS) {\n      switch (this.action) {\n        case \"error\":\n          color1 = \"\\x1b[41m\\x1b[33m%s\\x1b[0m\"\n          break\n        case \"warn\":\n          color1 = \"\\x1b[43m\\x1b[30m%s\\x1b[0m\"\n          break\n        case \"info\":\n          color1 = \"\\x1b[46m\\x1b[30m%s\\x1b[0m\"\n          break\n        case \"debug\":\n          color1 = \"\\x1b[45m\\x1b[30m%s\\x1b[0m\"\n          break\n        case \"trace\":\n          color1 = \"\\x1b[106m\\x1b[30m%s\\x1b[0m\"\n          break\n        case \"success\":\n          color1 = \"\\x1b[42m\\x1b[30m%s\\x1b[0m\"\n          this.action = \"log\"\n          break\n        case \"subtle\":\n          color1 = \"\\x1b[40m\\x1b[90m%s\\x1b[0m\"\n          this.action = \"log\"\n          break\n      }\n    } else {\n      /*\n       * color for browser devtools\n       */\n      switch (action) {\n        case \"error\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"background:red; color:yellow\")\n          break\n        case \"warn\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"background:yellow; color:black\")\n          break\n        case \"info\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"background:teal; color:black\")\n          break\n        case \"debug\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"background:magenta; color:black\")\n          break\n        case \"trace\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"background:cyan; color:black\")\n          break\n        case \"success\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"background:lawngreen; color:black\")\n          break\n        case \"subtle\":\n          args[0] = \"%c\" + args[0]\n          args.splice(1, 0, \"color:grey\")\n          break\n      }\n    }\n  }\n\n  /*\n   * custom actions\n   */\n  switch (action) {\n    case \"success\":\n      action = \"log\"\n      break\n    case \"subtle\":\n      action = \"log\"\n      break\n  }\n\n  /*\n   * Log message to console\n   * use specified action (log, info, debug, warn, etc)\n   */\n  if (action + this.action !== this.sharedContext.last_action) {\n    console.log(\"\")\n  }\n  // log color\n  if (color1) {\n    if (trace) {\n      // color1, trace\n      args = [color1, ...args, trace, color2]\n    } else {\n      // color1, no trace\n      args = [color1, ...args, color2]\n    }\n  } else if (trace) {\n    // no color1, trace\n    args = [...args, trace]\n  } else {\n    // no color1, no trace\n    args = [...args]\n  }\n  // log content\n  console[action](...args)\n\n  /*\n   * Log original content to cloud\n   */\n  if (this.logToCloud) {\n    this.logToCloud(...arguments, trace)\n  }\n\n  /*\n   * Add linebreak when different actions back to back\n   * but no linebreak when same action\n   */\n  this.sharedContext.last_action = action + this.action\n\n  /*\n   * return\n   */\n  if (error_message) {\n    return error_message\n  }\n}\n","import CConsoleLog from \"./function/CConsoleLog\"\n\n/**\n * Log to console, and optionally to your custom cloud functions\n *\n *    In console, will color code each message:\n *        info: green\n *        warn: orange\n *        error: red\n *    Other methods (log, debug, trace, table, are not colored,\n *    because the coloring breaks Chrome developer tools console message)\n *    This is still experimental! TODO: get coloring to work, without breaking DevTools\n *    TODO: test in front-end, browser.\n *\n * @param options {object} - options and settings\n * @param options.logToCloud {object} - an object of {key:value{function},} pairs\n *    Ex: {log:function(){}, info:function(){}, etc}\n *    Tested, and works well with LogDNA. `options.logToCloud = logdna.createLogger()`\n */\nconst cconsoleInit = function(options) {\n  // optionally, pass log-To-Cloud versions of each log action (log,info,error,etc.)\n  let { logToCloud = {}, useTrace = true, useColor = false } = options\n  // so different actions (log/info/debug/etc) can communicate with eachother:\n  let sharedContext = {}\n  // log\n  let cconsole = {\n    // custom (colorful) loggers\n    log: CConsoleLog.bind({ action: \"log\", useTrace, useColor, logToCloud: logToCloud.log, sharedContext }),\n    info: CConsoleLog.bind({ action: \"info\", useTrace, useColor, logToCloud: logToCloud.info, sharedContext }),\n    debug: CConsoleLog.bind({ action: \"debug\", useTrace, useColor, logToCloud: logToCloud.debug, sharedContext }),\n    warn: CConsoleLog.bind({ action: \"warn\", useTrace, useColor, logToCloud: logToCloud.warn, sharedContext }),\n    error_message: CConsoleLog.bind({ action: \"error_message\", useTrace, useColor, logToCloud: logToCloud.error, sharedContext }),\n    error: CConsoleLog.bind({ action: \"error\", useTrace, useColor, logToCloud: logToCloud.error, sharedContext }),\n    table: CConsoleLog.bind({ action: \"table\", useTrace, useColor, logToCloud: logToCloud.table, sharedContext }),\n    trace: CConsoleLog.bind({ action: \"trace\", useTrace, useColor, logToCloud: logToCloud.trace, sharedContext }),\n    success: CConsoleLog.bind({ action: \"success\", useTrace, useColor, logToCloud: logToCloud.success, sharedContext }),\n    subtle: CConsoleLog.bind({ action: \"subtle\", useTrace, useColor, logToCloud: logToCloud.subtle, sharedContext }),\n    // pass-through (default) loggers (standard)\n    clear: console.clear,\n    time: console.time,\n    timeEnd: console.timeEnd,\n    timeLog: console.timeLog,\n    assert: console.assert,\n    count: console.count,\n    countReset: console.countReset,\n    dir: console.dir,\n    dirxml: console.dirxml,\n    group: console.group,\n    groupCollapsed: console.groupCollapsed,\n    groupEnd: console.groupEnd\n  }\n  // extra pass-through (default) loggers (non-standard)\n  if (console.profile) {\n    cconsole.profile = console.profile\n  }\n  if (console.profileEnd) {\n    cconsole.profileEnd = console.profileEnd\n  }\n  if (console.timeStamp) {\n    cconsole.timeStamp = console.timeStamp\n  }\n  // return console\n  return cconsole\n}\n\n/*\n * Export cconsole\n */\nexport default cconsoleInit\n"],"names":["destroyCircular","from","seen","to","Array","isArray","push","key","value","Object","entries","includes","slice","commonProperties","property","$22bb71d7ad49eab3907602e0fcbf72ff$export$default","name","NODEJSCOLORS","window","execArgv","join","args","arguments","trace","this","useTrace","stack","err","Error","split","str","i_end","lastIndexOf","i_start_before","substring","hasError","a","length","$97374b01d9b869a48958263b9e2ce30b$export$default","e","JSON","parse","stringify","error_message","action","map","replace","toString","color1","color2","useColor","splice","sharedContext","last_action","console","log","logToCloud","options","cconsole","$8a7baf94b20e392fd05eb35d4ffc80bf$export$default","bind","info","debug","warn","error","table","success","subtle","clear","time","timeEnd","timeLog","assert","count","countReset","dir","dirxml","group","groupCollapsed","groupEnd","profile","profileEnd","timeStamp"],"version":3,"file":"index.js.map"}